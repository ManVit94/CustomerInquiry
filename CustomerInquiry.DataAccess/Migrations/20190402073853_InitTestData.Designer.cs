// <auto-generated />
using System;
using CustomerInquiry.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CustomerInquiry.DataAccess.Migrations
{
    [DbContext(typeof(CustomerInquiryDbContext))]
    [Migration("20190402073853_InitTestData")]
    partial class InitTestData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CustomerInquiry.DataAccess.DomainModel.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("MobileNo")
                        .HasMaxLength(10);

                    b.HasKey("CustomerID");

                    b.HasIndex("ContactEmail")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            ContactEmail = "cust1@gmail.com",
                            CustomerName = "Customer 1",
                            MobileNo = 385551
                        },
                        new
                        {
                            CustomerID = 2,
                            ContactEmail = "cust2@gmail.com",
                            CustomerName = "Customer 2",
                            MobileNo = 385552
                        });
                });

            modelBuilder.Entity("CustomerInquiry.DataAccess.DomainModel.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(12, 2)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(3);

                    b.Property<int>("CustomerID");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TransactionTime")
                        .HasColumnType("datetime2(0)");

                    b.HasKey("TransactionID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            TransactionID = 1,
                            Amount = 200m,
                            CurrencyCode = "USD",
                            CustomerID = 1,
                            Status = 1,
                            TransactionTime = new DateTime(2019, 1, 12, 14, 34, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionID = 2,
                            Amount = 300m,
                            CurrencyCode = "USD",
                            CustomerID = 1,
                            Status = 1,
                            TransactionTime = new DateTime(2019, 1, 7, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionID = 3,
                            Amount = 1200m,
                            CurrencyCode = "EUR",
                            CustomerID = 1,
                            Status = 1,
                            TransactionTime = new DateTime(2019, 4, 1, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionID = 4,
                            Amount = 100m,
                            CurrencyCode = "USD",
                            CustomerID = 2,
                            Status = 3,
                            TransactionTime = new DateTime(2019, 3, 12, 10, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionID = 5,
                            Amount = 500m,
                            CurrencyCode = "USD",
                            CustomerID = 2,
                            Status = 2,
                            TransactionTime = new DateTime(2019, 3, 7, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            TransactionID = 6,
                            Amount = 700m,
                            CurrencyCode = "EUR",
                            CustomerID = 2,
                            Status = 1,
                            TransactionTime = new DateTime(2019, 4, 1, 21, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("CustomerInquiry.DataAccess.DomainModel.Transaction", b =>
                {
                    b.HasOne("CustomerInquiry.DataAccess.DomainModel.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
